name: Build, Test, Scan, and Push Docker Image

on:
  push:
    paths:
      - 'app-src/pyapp1/**'
  workflow_dispatch:  # Manual trigger

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 2375:2375
        env:
          DOCKER_HOST: tcp://localhost:2375
          DOCKER_TLS_CERTDIR: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Get Git Tag or Branch
      id: get_tag_or_branch
      run: |
        if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        elif [ "${GITHUB_REF_NAME}" = "main" ]; then
          echo "TAG_NAME=latest" >> $GITHUB_ENV
        else
          echo "TAG_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        fi

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker Build and Test Steps
    - name: Build the Docker image (artifact layer)
      working-directory: app-src/pyapp1
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pyapp1:${{ env.TAG_NAME }} --target artifact .

    - name: Test the Docker image (test layer)
      working-directory: app-src/pyapp1
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pyapp1:test --target test .
        docker run -i --rm -v $(pwd)/out:/app/out -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/pyapp1:test

    # Start SonarQube server using Docker
    - name: SonarQube Scan
      working-directory: app-src/pyapp1
      run: |
        docker run -d --name sonarqube -p 9000:9000 sonarqube:latest
        sleep 60  # Wait for SonarQube to start
        response=$(curl -X POST -u admin:admin "http://localhost:9000/api/user_tokens/generate?name=sonarqube-scanner")
        echo $response | jq -r '.token' > sonar_token.txt
        docker run --rm \
          -v $(pwd):/usr/src \
          -v $(pwd)/sonar-project.properties:/usr/src/sonar-project.properties \
          --network="host" \
          sonarsource/sonar-scanner-cli \
          sonar-scanner \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=$(cat sonar_token.txt)
        sleep 60  # Wait for SonarQube results
        curl -u $(cat sonar_token.txt): \
        "http://localhost:9000/api/qualitygates/project_status?projectKey=pyapp1" \
        | jq -r '.projectStatus.status' | grep -q "OK"

    # Trivy Security Scan
    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/pyapp1:${{ env.TAG_NAME }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true

    # Push the Docker image
    - name: Push the Docker image
      working-directory: app-src/pyapp1
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/pyapp1:${{ env.TAG_NAME }}
